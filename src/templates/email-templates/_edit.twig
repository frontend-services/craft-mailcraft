{% if not emailTemplate.id %}
    {% do view.registerAssetBundle("frontendservices\\mailcraft\\assetbundles\\emailtemplateeditor\\EmailTemplateEditorAsset") %}
{% endif %}
{% do view.registerAssetBundle("craft\\web\\assets\\prismjs\\PrismJsAsset") %}
{% set pluginSettings = craft.app.plugins.getPlugin('mailcraft').getSettings() %}

{% set mailCraftEditorSettings = {
    templateId: emailTemplate.id,
} %}

{% js %}
    window.mailCraftEditorSettings = {{ mailCraftEditorSettings|json_encode|raw }};
{% endjs %}

{% set title = emailTemplate.title ?: "New Email Template"|t('mailcraft') %}
{% set selectedSubnavItem = 'mailcraft' %}

{% extends "_layouts/cp" %}
{% import "_includes/forms" as forms %}

{% set fullPageForm = true %}

{% block content %}
    {% if not currentUser.can('mailcraft:manageEmailTemplates') %}
        {% exit 403 %}
    {% endif %}

    <div id="mailcraft-form">
        <div class="flex-fields">
            {{ actionInput('mailcraft/email-templates/save') }}
            {{ redirectInput('mailcraft') }}
            {% if emailTemplate.id %}{{ hiddenInput('templateId', emailTemplate.id) }}{% endif %}

            {% if not emailTemplate.id %}
                {{ forms.selectField({
                    label: "Start with Example"|t('mailcraft'),
                    instructions: "Choose a template example to start with"|t('mailcraft'),
                    id: 'example-selector',
                    name: 'example',
                    options: exampleTemplates,
                }) }}
            {% endif %}

            {{ forms.textField({
                first: true,
                label: "Title"|t('mailcraft'),
                instructions: "Internal name for this email"|t('mailcraft'),
                id: 'title',
                name: 'title',
                value: emailTemplate.title,
                errors: emailTemplate.getErrors('title'),
                autofocus: true,
                required: true,
            }) }}

            <hr>

            {{ forms.textField({
                label: "Subject"|t('mailcraft'),
                instructions: "Email subject line"|t('mailcraft'),
                id: 'subject',
                name: 'subject',
                value: emailTemplate.subject,
                errors: emailTemplate.getErrors('subject'),
                required: true,
            }) }}

            {{ craft.mailCraft.templateEditor(emailTemplate)|raw }}
        </div>

        <style>
        div#delay-field#delay-field {
            margin-bottom: 0 !important;
            padding-bottom: 0.4em !important;
        }
        </style>
    </div>

{% endblock %}

{% block details %}
    <div class="meta">
        {{ forms.lightswitchField({
            label: "Enabled"|t('app'),
            id: 'enabled',
            name: 'enabled',
            on: emailTemplate.enabled,
        }) }}
    </div>

    <div class="meta">
        {{ forms.selectizeField({
            label: "Event"|t('mailcraft'),
            id: 'event',
            name: 'event',
            value: emailTemplate.event,
            options: craft.mailCraft.getAvailableEventsForOptions(),
            errors: emailTemplate.getErrors('event'),
            required: true,
        }) }}

        {{ forms.selectizeField({
            label: "Condition 1"|t('mailcraft'),
            id: 'condition1',
            name: 'condition1',
            value: emailTemplate.condition1,
            options: [],
            errors: emailTemplate.getErrors('condition1'),
        }) }}

        {{ forms.selectizeField({
            label: "Condition 2"|t('mailcraft'),
            id: 'condition2',
            name: 'condition2',
            value: emailTemplate.condition2,
            options: [],
            errors: emailTemplate.getErrors('condition2'),
        }) }}

        {{ forms.textareaField({
            label: "Extra Conditions"|t('mailcraft'),
            instructions: "Extra conditions to be met before sending the email. For example, <code class=\"language-twig\">entry.section==\"news\"</code> to only send the email when the entry is in the 'news' section."|t('mailcraft'),
            id: 'conditions',
            name: 'conditions',
            value: emailTemplate.conditions,
            errors: emailTemplate.getErrors('conditions'),
        }) }}

        {{ forms.textField({
            label: "Delay (s)"|t('mailcraft'),
            instructions: "Delay in seconds before sending the email. For example send an email 2 days after user registers."|t('mailcraft'),
            id: 'delay',
            name: 'delay',
            type: 'number',
            value: emailTemplate.delay,
            errors: emailTemplate.getErrors('delay'),
        }) }}
        <div class="timepicker">
            {# create buttons for automatic adding of some standard times, and insert time to field above on click #}
            <button type="button" class="btn small" data-time="0">Instantly</button>
            <button type="button" class="btn small" data-time="3600">1 Hour</button>
            <button type="button" class="btn small" data-time="86400">1 Day</button>
            <button type="button" class="btn small" data-time="604800">1 Week</button>
            <button type="button" class="btn small" data-time="2592000">1 Month</button>
        </div>
        {{ forms.textField({
            label: "To"|t('mailcraft'),
            instructions: "Recipient email address"|t('mailcraft'),
            id: 'to',
            name: 'to',
            value: emailTemplate.to,
            placeholder: 'test@test.com',
            errors: emailTemplate.getErrors('to'),
            required: true,
        }) }}

        {{ forms.textField({
            label: "To Name"|t('mailcraft'),
            id: 'toName',
            name: 'toName',
            value: emailTemplate.toName,
            errors: emailTemplate.getErrors('toName'),
        }) }}

        {% if pluginSettings.showCcBcc %}
            {{ forms.textField({
                label: "CC"|t('mailcraft'),
                id: 'cc',
                name: 'cc',
                value: emailTemplate.cc,
                errors: emailTemplate.getErrors('cc'),
            }) }}

            {{ forms.textField({
                label: "BCC"|t('mailcraft'),
                id: 'bcc',
                name: 'bcc',
                value: emailTemplate.bcc,
                errors: emailTemplate.getErrors('bcc'),
            }) }}
        {% endif %}

        {{ forms.textField({
            label: "From"|t('mailcraft'),
            id: 'from',
            name: 'from',
            value: emailTemplate.from,
            placeholder: 'test@test.com',
            errors: emailTemplate.getErrors('from'),
        }) }}

        {{ forms.textField({
            label: "From Name"|t('mailcraft'),
            id: 'fromName',
            name: 'fromName',
            value: emailTemplate.fromName,
            errors: emailTemplate.getErrors('fromName'),
        }) }}

        {% if pluginSettings.showCcBcc %}
            {{ forms.textField({
                label: "Reply To"|t('mailcraft'),
                id: 'replyTo',
                name: 'replyTo',
                value: emailTemplate.replyTo,
                errors: emailTemplate.getErrors('replyTo'),
            }) }}
        {% endif %}
    </div>

    {% if emailTemplate.id %}
        <hr>
        <div class="meta read-only">
            <div class="data">
                <h5 class="heading">{{ "Created at"|t('app') }}</h5>
                <div class="value">{{ emailTemplate.dateCreated|datetime('short') }}</div>
            </div>
            <div class="data">
                <h5 class="heading">{{ "Updated at"|t('app') }}</h5>
                <div class="value">{{ emailTemplate.dateUpdated|datetime('short') }}</div>
            </div>
        </div>
    {% endif %}

    <script>
        document.querySelectorAll('#condition1-field, #condition2-field').forEach(field => {
            field.classList.add('hidden');
        });
    </script>
{% endblock %}

{% js %}
document.querySelectorAll('.timepicker button').forEach(function(button) {
    button.addEventListener('click', function() {
        document.getElementById('delay').value = parseInt(this.getAttribute('data-time'));
    });
});

document.addEventListener('DOMContentLoaded', function() {
    const globalConditions = {{ craft.mailCraft.getGlobalConditions|json_encode|raw }};
        window.globalConditions = globalConditions;

        setTimeout(() => { {# Give it some time to be sure that selectize has initialized #}
            const eventSelect = document.getElementById('event').selectize;
            const condition1Select = document.getElementById('condition1').selectize;
            const condition2Select = document.getElementById('condition2').selectize;

            const updateConditionSelect = (select, conditions, additionalUpdateSelect = null, group = null) => {
                select.clear();
                select.clearOptions();
                const field = select.$control[0].closest('.field');
                const labelElement = field.querySelector('label');

                if (!conditions) {
                    field.classList.add('hidden');
                    return;
                }

                field.classList.remove('hidden');

                const label = conditions.name;

                const options = Object.values(conditions.options);

                options.forEach(option => {
                    select.addOption(option);
                });
                select.refreshOptions(false);
                select.updatePlaceholder();

                labelElement.innerHTML = label;

                if (additionalUpdateSelect) { // update condition 2 selector
                    if (globalConditions?.[group]?.condition2 ?? null) {
                        if (conditions?.dependant) {
                            select.on('change', (value) => {
                                if (!value) return;
                                const condition2 = {
                                    name: globalConditions[group].condition2.name,
                                    operand: globalConditions[group].condition2.operand,
                                    options: globalConditions[group].condition2.options[value]
                                };
                                updateConditionSelect(additionalUpdateSelect, condition2);
                            });
                        } else {
                            updateConditionSelect(additionalUpdateSelect, globalConditions?.[group]?.condition2 ?? null);
                        }
                    }
                }
            };

            eventSelect.on('change', (value) => {
                if (!value) return;

                // clear both selects and hide fields
                condition1Select.clear();
                condition1Select.clearOptions();
                condition1Select.$control[0].closest('.field').classList.add('hidden');
                condition2Select.clear();
                condition2Select.clearOptions();
                condition2Select.$control[0].closest('.field').classList.add('hidden');

                condition1Select.off('change');
                updateConditionSelect(condition1Select, globalConditions?.[value]?.condition1 ?? null, condition2Select, value);
            });

            // Set existing values for condition1 and condition2
            const existingCondition1 = '{{ emailTemplate.condition1 }}';
            const existingCondition2 = '{{ emailTemplate.condition2 }}';

            if (existingCondition1) {
                setTimeout(() => {
                    condition1Select.setValue(existingCondition1);
                }, 500);
            }

            if (existingCondition2) {
                setTimeout(() => {
                    condition2Select.setValue(existingCondition2);
                }, 500);
            }

            eventSelect.trigger('change', eventSelect.getValue());
        }, 500);

    });
{% endjs %}